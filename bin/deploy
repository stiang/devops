#!/bin/bash
set -e

# Config here
org_and_repo="${1}"
branch="${2}"
target="${3}"
mode="${4}"
extra="${5}"
IFS='/' read -ra org_and_repo_arr <<< "${org_and_repo}"
org="${org_and_repo_arr[0]}"
repo="${org_and_repo_arr[1]}"

repo_web_path="https://github.com/${org_and_repo}"
repo_git_path="git@github.com:${org_and_repo}.git"

path="/local/www/${org}/${repo}/${target}"
working_path="${path}/current"

# --------- DON'T TOUCH BELOW ------------

#########
# setup #
#########

orig_pwd="$(pwd)"
user="$(whoami)"
echo "user: ${user}"
deploy_key="/home/${user}/.ssh/${org}-deploy-key"
quiet_option=""
quiet_suffix=""
output_prefix=">>> "
if [ "${extra}" != "" ]
then
  output_prefix=""
  quiet_option=" -q "
  quiet_suffix=" > /dev/null 2>&1 "
fi

date=$(date "+%Y-%b-%d-%H-%M-%N")

branch_str=""
# set
if [ "${branch}" != "master" -a "${mode}" != "HEAD" ]
then
  branch_str="origin ${branch}"
fi

# Sanity check and default assignment for "mode"
if [ "${mode}" != "update" -a "${mode}" != "clone" ]
then
  mode="update"
fi

# Sanity check for "target"
if [ "${target}" != "prod" -a "${target}" != "staging" -a "${target}" != "dev" ]
then
  output "Unknown target '${target}', exiting prematurely."
  exit 29
fi


#############
# functions #
#############

function output {
  output_text="${1}"
  echo "${output_prefix}${output_text}"
}

function clone {
  clone_path="${1}"
  output "Cloning ${repo_git_path} into ${clone_path}..."
  # if [ -r ${deploy_key} ]
  # then 
  #   output "Using deploy key (${deploy_key}) when cloning..."
  #   ssh-agent bash -c "ssh-add ${deploy_key} ${quiet_suffix} && git clone ${quiet_option} ${repo_git_path} ${clone_path}"
  # else
    # output "No deploy key found in ${deploy_key}, trying auth-less clone..."
  git clone ${quiet_option} ${repo_git_path} ${clone_path}
  # fi
}

function run_deploy_hook {
  tmp_path="${1}"
  hook_script="${path}/${tmp_path}/bin/pre_deploy_hook"
  if [ -r ${hook_script} ]
  then
    output "Found pre deploy hook (${hook_script}), running..."
    ${hook_script} ${target} ${mode}
  else
    output "No pre deploy hook found in ${hook_script}, moving on..."
  fi
}


##############
# main logic #
##############

output "DEPLOYING '${org_and_repo}' to '${target}'..."
output ""

if [ ! -d "${path}" ]
then
  mkdir -p "${path}"
fi

if [ ! -d "${path}/logs" ]
then
  mkdir -p "${path}/logs"
fi
(chmod -fR g+w "${path}/logs" || true)

# Update existing repo from origin (git pull)
if [ $mode == "update" ]
then
  if [ -L ${working_path} ]
  then
    rm ${working_path}
  fi
  if [ ! -d ${working_path} ]
  then
    mkdir -p ${working_path}
  fi

  if [ ! -d "${working_path}/.git" ]
  then
    clone "${working_path}"
  fi

# Clone repo and set it up from scratch
elif [ $mode == "clone" ]
then
  cd "${path}"
  clone "${date}"
  cd "${date}"
  run_deploy_hook "${date}"
  cd "${path}"
  if [ -L "current" ]
  then
    rm "current"
  fi
  ln -s "${date}" "current"
  cd "${orig_pwd}"
else
  output "Unknown mode: ${mode}"
  exit 99
fi

cd "${working_path}"

# Do git pull if mode == update
if [ $mode == "update" ]
then
  output "Updating repo from remote..."
  ### ssh-agent bash -c "ssh-add ${deploy_key} ${quiet_suffix} && git pull ${branch_str} ${quiet_option}"
  # ssh-agent bash -c "ssh-add ${deploy_key} ${quiet_suffix} && git pull ${quiet_option}"
  git pull ${quiet_option}
fi

# Handle non-master branch
if [ "${branch_str}" != "" ]
then
  output "Switching to branch '${branch}'..."
  git checkout "${branch}"
fi

# Run repo deploy script, if it exists
deploy_script="${working_path}/bin/deploy"
if [ -r ${deploy_script} ]
then
  output "Found repo deploy script (${deploy_script}), handing over control..."
  ${deploy_script} ${target} ${mode}
else
  output "No deploy script found in ${deploy_script}, done!"
fi

cd "${orig_pwd}"
