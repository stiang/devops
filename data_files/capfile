require 'json'
conf = nil
conf_file_name = ".project.json"
begin
  if File.file?(conf_file_name)
    conf_file = File.read(conf_file_name)
    conf = JSON.parse(conf_file)
  end
rescue
end

if not conf.is_a? Hash
  conf = Hash.new
end

mode = conf["deploy_mode"] || "update"
servers = conf["servers"] || ["dev.grytoyr.net"]

# Setup here
repo_url = `git ls-remote --get-url`
if repo_url.match(/^https:/)
  provider = repo_url.split('://')[1].split('/')[0]
  repo = repo_url.split('://')[1].split('/')[1..-1].join('/').gsub(/\.git$/, '').gsub(/[\\\n]/, '')
else
  provider = repo_url.split(':')[0].split('@')[1]
  repo = repo_url.split(':')[1].gsub(/\.git$/, '').gsub(/[\\\n]/, '')
end
branch = `git rev-parse --symbolic-full-name --abbrev-ref HEAD`.gsub(/[\\\n]/, '')
cmd    = "curl -so /tmp/dyn-deploy https://raw.githubusercontent.com/stiang/devops/master/bin/deploy?cachebuster=#{Time.now.to_i} && bash /tmp/dyn-deploy"
common = "#{cmd} #{provider} #{repo} #{branch}"

role_args = [:app_servers] + servers
role(*role_args)

ssh_options[:forward_agent] = true

set :user, "app"
role_name = :app_servers

desc "Deploy App to production"
task :deploy, :roles => role_name do
  run "#{common} prod #{mode} quiet"
end

desc "Deploy App to staging"
task :stage, :roles => role_name do
  run "#{common} staging #{mode} quiet"
end

desc "Deploy App to development"
task :dev, :roles => role_name do
  run "#{common} dev #{mode} quiet"
end
